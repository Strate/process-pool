{"version":3,"sources":["../../src/test/functionLimit.spec.js"],"names":[],"mappings":";;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;6BACJ,kBAAkB;;;;sBACzB,WAAW;;;;AAE9B,IAAI,KAAK,GAAG,SAAR,KAAK,CAAG,IAAI;SAAI,0BAAY,UAAA,OAAO;WAAI,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC;GAAA,CAAC;CAAA,CAAA;;AAErE,QAAQ,CAAC,gBAAgB,EAAE,YAAM;AAC/B,IAAE,CAAC,yDAAyD,EAAE,YAAM;AAClE,QAAI,IAAI,GAAG,oBAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,sBAAQ,KAAK,CAAC,CAAA;AAC3C,QAAI,MAAM,GAAG,CAAC,CAAA;AACd,QAAI,IAAI,GAAG,gCAAc;aAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO;KAAA,EAAE,CAAC,CAAC,CAAA;AACzD,QAAI,QAAQ,GAAG,oBAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;aAAM,IAAI,EAAE;KAAA,CAAC,CAAA;;AAE9C,WAAO,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAM;AAC1B,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AACtB,UAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;AACjB,aAAO,QAAQ,CAAC,CAAC,CAAC,CAAA;KACnB,CAAC,CACD,IAAI,CAAC,YAAM;AACV,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AACtB,UAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;AACjB,UAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;AACjB,aAAO,sBAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;KACtC,CAAC,CAAA;GACH,CAAC,CAAA;;AAEF,IAAE,CAAC,0EAA0E,EAAE,YAAM;AACnF,QAAI,IAAI,GAAG,oBAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,sBAAQ,KAAK,CAAC,CAAA;AAC3C,QAAI,MAAM,GAAG,CAAC,CAAA;AACd,QAAI,IAAI,GAAG,gCAAc;aAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO;KAAA,EAAE,CAAC,CAAC,CAAA;AACzD,QAAI,QAAQ,GAAG,oBAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;aAAM,IAAI,EAAE;KAAA,CAAC,CAAA;;AAE9C,WAAO,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAM;AAC1B,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AACtB,UAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAA;AAChB,aAAO,yBAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;KAC3B,CAAC,CACD,IAAI,CAAC,YAAM;;AAEV,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AACtB,UAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;AACjB,UAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;AACjB,aAAO,sBAAQ,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;KACtC,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"src/test/functionLimit.spec.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport functionLimit from '../functionLimit'\nimport invert from '../invert'\n\nvar delay = time => new Promise(resolve => setTimeout(resolve, time))\n\ndescribe('function limit', () => {\n  it('should limit active promises to two, queuing third call', () => {\n    var defs = _.range(0, 3).map(Promise.defer)\n    var nCalls = 0\n    var pool = functionLimit(() => defs[nCalls++].promise, 2)\n    var promises = _.range(0, 3).map(() => pool())\n\n    return delay(10).then(() => {\n      nCalls.should.equal(2)\n      defs[0].fulfill()\n      return promises[0]\n    })\n    .then(() => {\n      nCalls.should.equal(3)\n      defs[1].fulfill()\n      defs[2].fulfill()\n      return Promise.all(promises.slice(1))\n    })\n  })\n\n  it('should queue a call according to limits until a running function rejects', () => {\n    var defs = _.range(0, 3).map(Promise.defer)\n    var nCalls = 0\n    var pool = functionLimit(() => defs[nCalls++].promise, 2)\n    var promises = _.range(0, 3).map(() => pool())\n\n    return delay(10).then(() => {\n      nCalls.should.equal(2)\n      defs[0].reject()\n      return invert(promises[0])\n    })\n    .then(() => {\n      // this would be 2 if the rejection was not caught and another function scheduled\n      nCalls.should.equal(3)\n      defs[1].fulfill()\n      defs[2].fulfill()\n      return Promise.all(promises.slice(1))\n    })\n  })\n})\n"]}