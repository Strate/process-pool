{"version":3,"sources":["../src/functionLimit.js"],"names":[],"mappings":";;;;;;;;wBAAoB,UAAU;;;;;;;;;;qBAOf,UAAS,IAAI,EAAE,KAAK,EAAE;AACnC,MAAI,WAAW,GAAG,CAAC,CAAA;AACnB,MAAI,SAAS,GAAG,EAAE,CAAA;;AAElB,MAAI,eAAe,GAAG,SAAlB,eAAe,GAAS;AAC1B,QAAI,WAAW,GAAG,KAAK,EAAE;AACvB,QAAE,WAAW,CAAA;AACb,aAAO,sBAAQ,OAAO,EAAE,CAAA;KACzB,MACI;AACH,UAAI,QAAQ,GAAG,sBAAQ,OAAO,EAAE,CAAA;AAChC,eAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AACxB,aAAO,QAAQ,CAAC,OAAO,CAAA;KACxB;GACF,CAAA;;AAED,MAAI,YAAY,GAAG,SAAf,YAAY,GAAS;AACvB,QAAI,SAAS,CAAC,MAAM,EAClB,SAAS,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAA,KAE3B,EAAE,WAAW,CAAA;GAChB,CAAA;;AAED,SAAO,YAAa;sCAAT,IAAI;AAAJ,UAAI;;;AACb,WAAO,eAAe,EAAE,CAAC,IAAI,CAAC,YAAM;AAClC,aAAO,sBAAQ,OAAO,CAAC,IAAI,kBAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AACnD,oBAAY,EAAE,CAAA;AACd,eAAO,MAAM,CAAA;OACd,CAAC,SACI,CAAC,UAAA,GAAG,EAAI;AACZ,oBAAY,EAAE,CAAA;AACd,cAAM,GAAG,CAAA;OACV,CAAC,CAAA;KACH,CAAC,CAAA;GACH,CAAA;CACF","file":"src/functionLimit.js","sourcesContent":["import Promise from 'bluebird'\n\n/**\n * This accepts a promise returning function and returns a function that allows\n * a limited number of unresolved promises to be active. Calls beyond this limit\n * will be queued.\n */\nexport default function(func, limit) {\n  var activeCalls = 0\n  var callQueue = []\n\n  var getFreeFunction = () => {\n    if (activeCalls < limit) {\n      ++activeCalls\n      return Promise.resolve()\n    }\n    else {\n      var deferred = Promise.pending()\n      callQueue.push(deferred)\n      return deferred.promise\n    }\n  }\n\n  var callComplete = () => {\n    if (callQueue.length)\n      callQueue.shift().fulfill()\n    else\n      --activeCalls\n  }\n\n  return (...args) => {\n    return getFreeFunction().then(() => {\n      return Promise.resolve(func(...args)).then(result => {\n        callComplete()\n        return result\n      })\n      .catch(err => {\n        callComplete()\n        throw err\n      })\n    })\n  }\n}\n"]}